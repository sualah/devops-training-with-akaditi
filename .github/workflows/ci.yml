name: CI/CD Pipeline

on:
  push:
    branches: [ dev, master, uat, prod ]
  pull_request:
    branches: [ dev, master, uat, prod ]

env:
  AWS_REGION: eu-central-1
  DOCKER_REGISTRY: 269700396904.dkr.ecr.eu-central-1.amazonaws.com/training-repo
  PROJECT_NAME: training-project

jobs:
  build-docker-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push image
        id: build
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: training-repo
          IMAGE_TAG: devsecops-training-${{ github.run_id }}
        run: |
          echo "Image name is devsecops-training-${{ github.run_id }}"
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  scan-image:
    runs-on: ubuntu-latest
    needs: build-docker-push
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.login-ecr.outputs.registry }}/training-repo:devsecops-training-${{ github.run_id }}
          format: 'json'
          output: 'trivy-report.json'
          severity: 'CRITICAL,HIGH'
          scanners: 'vuln'

      - name: Check for vulnerabilities
        continue-on-error: true
        run: |
          if [ -s trivy-report.json ]; then
            echo "⚠️ Vulnerabilities found:"
            cat trivy-report.json
            echo "⚠️ Continuing deployment despite vulnerabilities found"
          else
            echo "✅ No HIGH or CRITICAL vulnerabilities found."
          fi

      - name: Upload Trivy scan results
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-report.json
          retention-days: 30

  # Call Fortify Security Scan Workflow
  call-fortify-scan:
    needs: [build-docker-push, scan-image]
    if: false  # Temporarily disabled - set to 'github.ref == 'refs/heads/dev'' when Fortify is configured
    uses: ./.github/workflows/fortify-security-scan.yml
    with:
      image_name: devsecops-training-${{ github.run_id }}
      docker_registry: 269700396904.dkr.ecr.eu-central-1.amazonaws.com/training-repo
      aws_region: eu-central-1
    secrets:
      FORTIFY_SCANCENTRAL_URL: ${{ secrets.FORTIFY_SCANCENTRAL_URL }}
      FORTIFY_TOKEN: ${{ secrets.FORTIFY_TOKEN }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}


  # Deploy to DEV environment
  deploy_dev:
    needs: [build-docker-push, scan-image, call-fortify-scan]
    uses: ./.github/workflows/deploy.yml
    with:
      environment: dev
      overlay_path: overlays/dev
      deployment_name: devops-training-deployment
      branch_condition: github.ref == 'refs/heads/master'
      docker_registry: 269700396904.dkr.ecr.eu-central-1.amazonaws.com/training-repo
      image_name: devsecops-training-${{ github.run_id }}
    secrets:
      REPO_TOKEN_PAT: ${{ secrets.REPO_TOKEN_PAT }}

  # Deploy to UAT environment
  deploy_uat:
    needs: [build-docker-push, scan-image]
    uses: ./.github/workflows/deploy.yml
    with:
      environment: uat
      overlay_path: overlays/uat
      deployment_name: devops-training-deployment
      branch_condition: github.ref == 'refs/heads/uat'
      docker_registry: 269700396904.dkr.ecr.eu-central-1.amazonaws.com/training-repo
      image_name: devsecops-training-${{ github.run_id }}
    secrets:
      REPO_TOKEN_PAT: ${{ secrets.REPO_TOKEN_PAT }}

  # Deploy to PROD environment
  deploy_prod:
    needs: [build-docker-push, scan-image]
    uses: ./.github/workflows/deploy.yml
    with:
      environment: prod
      overlay_path: overlays/prod
      deployment_name: devops-training-deployment
      branch_condition: github.ref == 'refs/heads/prod'
      docker_registry: 269700396904.dkr.ecr.eu-central-1.amazonaws.com/training-repo
      image_name: devsecops-training-${{ github.run_id }}
    secrets:
      REPO_TOKEN_PAT: ${{ secrets.REPO_TOKEN_PAT }}
